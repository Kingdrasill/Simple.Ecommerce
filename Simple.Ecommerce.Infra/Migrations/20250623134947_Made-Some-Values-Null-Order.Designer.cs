// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Simple.Ecommerce.Infra;

#nullable disable

namespace Simple.Ecommerce.Infra.Migrations
{
    [DbContext(typeof(TesteDbContext))]
    [Migration("20250623134947_Made-Some-Values-Null-Order")]
    partial class MadeSomeValuesNullOrder
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Simple.Ecommerce.Domain.Entities.CategoryEntity.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Categorias", (string)null);
                });

            modelBuilder.Entity("Simple.Ecommerce.Domain.Entities.CouponEntity.Coupon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("DiscountId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpirationAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("UsedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("DiscountId");

                    b.ToTable("Cupons", (string)null);
                });

            modelBuilder.Entity("Simple.Ecommerce.Domain.Entities.CredentialVerificationEntity.CredentialVerification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("LoginId")
                        .HasColumnType("int");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("LoginId");

                    b.ToTable("VerificacaoCredenciais", (string)null);
                });

            modelBuilder.Entity("Simple.Ecommerce.Domain.Entities.DiscountBundleItemEntity.DiscountBundleItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("DiscountId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DiscountId");

                    b.HasIndex("ProductId");

                    b.ToTable("DescontosItensPacote", (string)null);
                });

            modelBuilder.Entity("Simple.Ecommerce.Domain.Entities.DiscountEntity.Discount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("DiscountScope")
                        .HasColumnType("int");

                    b.Property<int>("DiscountType")
                        .HasColumnType("int");

                    b.Property<int?>("DiscountValueType")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime?>("ValidFrom")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("ValidTo")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal?>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Descontos", (string)null);
                });

            modelBuilder.Entity("Simple.Ecommerce.Domain.Entities.DiscountTierEntity.DiscountTier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("DiscountId")
                        .HasColumnType("int");

                    b.Property<int>("MinQuantity")
                        .HasColumnType("int");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("DiscountId");

                    b.ToTable("DescontosTiers", (string)null);
                });

            modelBuilder.Entity("Simple.Ecommerce.Domain.Entities.FrequencyEntity.CacheFrequency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Entity")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("Expirable")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Frequency")
                        .HasColumnType("int");

                    b.Property<int?>("HoursToLive")
                        .HasColumnType("int");

                    b.Property<bool>("KeepCached")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.ToTable("Frequencias", (string)null);
                });

            modelBuilder.Entity("Simple.Ecommerce.Domain.Entities.LoginEntity.Login", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Credential")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Credential")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Logins", (string)null);
                });

            modelBuilder.Entity("Simple.Ecommerce.Domain.Entities.OrderDiscountEnity.OrderDiscount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("DiscountId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DiscountId");

                    b.HasIndex("OrderId");

                    b.ToTable("PedidosDescontos", (string)null);
                });

            modelBuilder.Entity("Simple.Ecommerce.Domain.Entities.OrderEntity.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Confirmation")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("OrderDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("OrderType")
                        .HasColumnType("int");

                    b.Property<int?>("PaymentMethod")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<decimal?>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Pedidos", (string)null);
                });

            modelBuilder.Entity("Simple.Ecommerce.Domain.Entities.OrderItemEntity.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("OrderId", "ProductId")
                        .IsUnique();

                    b.ToTable("PedidosItens", (string)null);
                });

            modelBuilder.Entity("Simple.Ecommerce.Domain.Entities.ProductCategoryEntity.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ProductId", "CategoryId")
                        .IsUnique();

                    b.ToTable("ProdutosCategorias", (string)null);
                });

            modelBuilder.Entity("Simple.Ecommerce.Domain.Entities.ProductDiscountEntity.ProductDiscount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("DiscountId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DiscountId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProdutosDescontos", (string)null);
                });

            modelBuilder.Entity("Simple.Ecommerce.Domain.Entities.ProductEntity.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Produtos", (string)null);
                });

            modelBuilder.Entity("Simple.Ecommerce.Domain.Entities.ProductPhotoEntity.ProductPhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProdutosFotos", (string)null);
                });

            modelBuilder.Entity("Simple.Ecommerce.Domain.Entities.ReviewEntity.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("ProductId", "UserId")
                        .IsUnique();

                    b.ToTable("Avaliacoes", (string)null);
                });

            modelBuilder.Entity("Simple.Ecommerce.Domain.Entities.UserAddressEntity.UserAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UsuariosEnderecos", (string)null);
                });

            modelBuilder.Entity("Simple.Ecommerce.Domain.Entities.UserEntity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("varchar(14)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.ToTable("Usuarios", (string)null);
                });

            modelBuilder.Entity("Simple.Ecommerce.Domain.Entities.CouponEntity.Coupon", b =>
                {
                    b.HasOne("Simple.Ecommerce.Domain.Entities.DiscountEntity.Discount", "Discount")
                        .WithMany("Coupons")
                        .HasForeignKey("DiscountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Discount");
                });

            modelBuilder.Entity("Simple.Ecommerce.Domain.Entities.CredentialVerificationEntity.CredentialVerification", b =>
                {
                    b.HasOne("Simple.Ecommerce.Domain.Entities.LoginEntity.Login", "Login")
                        .WithMany("CredentialVerifications")
                        .HasForeignKey("LoginId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Login");
                });

            modelBuilder.Entity("Simple.Ecommerce.Domain.Entities.DiscountBundleItemEntity.DiscountBundleItem", b =>
                {
                    b.HasOne("Simple.Ecommerce.Domain.Entities.DiscountEntity.Discount", "Discount")
                        .WithMany("DiscountBundleItems")
                        .HasForeignKey("DiscountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Simple.Ecommerce.Domain.Entities.ProductEntity.Product", "Product")
                        .WithMany("DiscountBundleItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Discount");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Simple.Ecommerce.Domain.Entities.DiscountTierEntity.DiscountTier", b =>
                {
                    b.HasOne("Simple.Ecommerce.Domain.Entities.DiscountEntity.Discount", "Discount")
                        .WithMany("DiscountTiers")
                        .HasForeignKey("DiscountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Discount");
                });

            modelBuilder.Entity("Simple.Ecommerce.Domain.Entities.LoginEntity.Login", b =>
                {
                    b.HasOne("Simple.Ecommerce.Domain.Entities.UserEntity.User", "User")
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Simple.Ecommerce.Domain.Entities.OrderDiscountEnity.OrderDiscount", b =>
                {
                    b.HasOne("Simple.Ecommerce.Domain.Entities.DiscountEntity.Discount", "Discount")
                        .WithMany("OrderDiscounts")
                        .HasForeignKey("DiscountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Simple.Ecommerce.Domain.Entities.OrderEntity.Order", "Order")
                        .WithMany("OrderDiscounts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Discount");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Simple.Ecommerce.Domain.Entities.OrderEntity.Order", b =>
                {
                    b.HasOne("Simple.Ecommerce.Domain.Entities.UserEntity.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Simple.Ecommerce.Domain.ValueObjects.AddressObject.Address", "Address", b1 =>
                        {
                            b1.Property<int>("OrderId")
                                .HasColumnType("int");

                            b1.Property<string>("CEP")
                                .IsRequired()
                                .HasMaxLength(8)
                                .HasColumnType("varchar(8)")
                                .HasColumnName("CEP");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(30)
                                .HasColumnType("varchar(30)")
                                .HasColumnName("City");

                            b1.Property<string>("Complement")
                                .HasMaxLength(30)
                                .HasColumnType("varchar(30)")
                                .HasColumnName("Complement");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasMaxLength(30)
                                .HasColumnType("varchar(30)")
                                .HasColumnName("Country");

                            b1.Property<string>("Neighbourhood")
                                .IsRequired()
                                .HasMaxLength(30)
                                .HasColumnType("varchar(30)")
                                .HasColumnName("Neighbourhood");

                            b1.Property<int>("Number")
                                .HasColumnType("int")
                                .HasColumnName("Number");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(30)
                                .HasColumnType("varchar(30)")
                                .HasColumnName("Street");

                            b1.HasKey("OrderId");

                            b1.ToTable("Pedidos");

                            b1.WithOwner()
                                .HasForeignKey("OrderId");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Simple.Ecommerce.Domain.Entities.OrderItemEntity.OrderItem", b =>
                {
                    b.HasOne("Simple.Ecommerce.Domain.Entities.OrderEntity.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Simple.Ecommerce.Domain.Entities.ProductEntity.Product", "Product")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Simple.Ecommerce.Domain.Entities.ProductCategoryEntity.ProductCategory", b =>
                {
                    b.HasOne("Simple.Ecommerce.Domain.Entities.CategoryEntity.Category", "Category")
                        .WithMany("ProductCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Simple.Ecommerce.Domain.Entities.ProductEntity.Product", "Product")
                        .WithMany("ProductCategories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Simple.Ecommerce.Domain.Entities.ProductDiscountEntity.ProductDiscount", b =>
                {
                    b.HasOne("Simple.Ecommerce.Domain.Entities.DiscountEntity.Discount", "Discount")
                        .WithMany("ProductDiscounts")
                        .HasForeignKey("DiscountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Simple.Ecommerce.Domain.Entities.ProductEntity.Product", "Product")
                        .WithMany("ProductDiscounts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Discount");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Simple.Ecommerce.Domain.Entities.ProductPhotoEntity.ProductPhoto", b =>
                {
                    b.HasOne("Simple.Ecommerce.Domain.Entities.ProductEntity.Product", "Product")
                        .WithMany("ProductPhotos")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Simple.Ecommerce.Domain.ValueObjects.PhotoObject.Photo", "Photo", b1 =>
                        {
                            b1.Property<int>("ProductPhotoId")
                                .HasColumnType("int");

                            b1.Property<string>("FileName")
                                .IsRequired()
                                .HasColumnType("longtext")
                                .HasColumnName("FileName");

                            b1.HasKey("ProductPhotoId");

                            b1.ToTable("ProdutosFotos");

                            b1.WithOwner()
                                .HasForeignKey("ProductPhotoId");
                        });

                    b.Navigation("Photo")
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Simple.Ecommerce.Domain.Entities.ReviewEntity.Review", b =>
                {
                    b.HasOne("Simple.Ecommerce.Domain.Entities.ProductEntity.Product", "Product")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Simple.Ecommerce.Domain.Entities.UserEntity.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Simple.Ecommerce.Domain.Entities.UserAddressEntity.UserAddress", b =>
                {
                    b.HasOne("Simple.Ecommerce.Domain.Entities.UserEntity.User", "User")
                        .WithMany("UserAddresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Simple.Ecommerce.Domain.ValueObjects.AddressObject.Address", "Address", b1 =>
                        {
                            b1.Property<int>("UserAddressId")
                                .HasColumnType("int");

                            b1.Property<string>("CEP")
                                .IsRequired()
                                .HasMaxLength(8)
                                .HasColumnType("varchar(8)")
                                .HasColumnName("CEP");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(30)
                                .HasColumnType("varchar(30)")
                                .HasColumnName("City");

                            b1.Property<string>("Complement")
                                .HasMaxLength(30)
                                .HasColumnType("varchar(30)")
                                .HasColumnName("Complement");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasMaxLength(30)
                                .HasColumnType("varchar(30)")
                                .HasColumnName("Country");

                            b1.Property<string>("Neighbourhood")
                                .IsRequired()
                                .HasMaxLength(30)
                                .HasColumnType("varchar(30)")
                                .HasColumnName("Neighbourhood");

                            b1.Property<int>("Number")
                                .HasColumnType("int")
                                .HasColumnName("Number");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(30)
                                .HasColumnType("varchar(30)")
                                .HasColumnName("Street");

                            b1.HasKey("UserAddressId");

                            b1.ToTable("UsuariosEnderecos");

                            b1.WithOwner()
                                .HasForeignKey("UserAddressId");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Simple.Ecommerce.Domain.Entities.UserEntity.User", b =>
                {
                    b.OwnsOne("Simple.Ecommerce.Domain.ValueObjects.PhotoObject.Photo", "Photo", b1 =>
                        {
                            b1.Property<int>("UserId")
                                .HasColumnType("int");

                            b1.Property<string>("FileName")
                                .IsRequired()
                                .HasColumnType("longtext")
                                .HasColumnName("FileName");

                            b1.HasKey("UserId");

                            b1.ToTable("Usuarios");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("Photo");
                });

            modelBuilder.Entity("Simple.Ecommerce.Domain.Entities.CategoryEntity.Category", b =>
                {
                    b.Navigation("ProductCategories");
                });

            modelBuilder.Entity("Simple.Ecommerce.Domain.Entities.DiscountEntity.Discount", b =>
                {
                    b.Navigation("Coupons");

                    b.Navigation("DiscountBundleItems");

                    b.Navigation("DiscountTiers");

                    b.Navigation("OrderDiscounts");

                    b.Navigation("ProductDiscounts");
                });

            modelBuilder.Entity("Simple.Ecommerce.Domain.Entities.LoginEntity.Login", b =>
                {
                    b.Navigation("CredentialVerifications");
                });

            modelBuilder.Entity("Simple.Ecommerce.Domain.Entities.OrderEntity.Order", b =>
                {
                    b.Navigation("OrderDiscounts");

                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("Simple.Ecommerce.Domain.Entities.ProductEntity.Product", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("DiscountBundleItems");

                    b.Navigation("ProductCategories");

                    b.Navigation("ProductDiscounts");

                    b.Navigation("ProductPhotos");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Simple.Ecommerce.Domain.Entities.UserEntity.User", b =>
                {
                    b.Navigation("Logins");

                    b.Navigation("Orders");

                    b.Navigation("Reviews");

                    b.Navigation("UserAddresses");
                });
#pragma warning restore 612, 618
        }
    }
}
